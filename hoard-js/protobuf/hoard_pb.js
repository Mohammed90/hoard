/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var reference_pb = require('./reference_pb.js');
var grant_pb = require('./grant_pb.js');
var storage_pb = require('./storage_pb.js');
goog.exportSymbol('proto.hoard.Address', null, global);
goog.exportSymbol('proto.hoard.Ciphertext', null, global);
goog.exportSymbol('proto.hoard.GrantAndGrantSpec', null, global);
goog.exportSymbol('proto.hoard.Plaintext', null, global);
goog.exportSymbol('proto.hoard.PlaintextAndGrantSpec', null, global);
goog.exportSymbol('proto.hoard.ReferenceAndCiphertext', null, global);
goog.exportSymbol('proto.hoard.ReferenceAndGrantSpec', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.GrantAndGrantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.GrantAndGrantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.GrantAndGrantSpec.displayName = 'proto.hoard.GrantAndGrantSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.GrantAndGrantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.GrantAndGrantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.GrantAndGrantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.GrantAndGrantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    grant: (f = msg.getGrant()) && grant_pb.Grant.toObject(includeInstance, f),
    grantspec: (f = msg.getGrantspec()) && grant_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.GrantAndGrantSpec}
 */
proto.hoard.GrantAndGrantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.GrantAndGrantSpec;
  return proto.hoard.GrantAndGrantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.GrantAndGrantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.GrantAndGrantSpec}
 */
proto.hoard.GrantAndGrantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new grant_pb.Grant;
      reader.readMessage(value,grant_pb.Grant.deserializeBinaryFromReader);
      msg.setGrant(value);
      break;
    case 2:
      var value = new grant_pb.Spec;
      reader.readMessage(value,grant_pb.Spec.deserializeBinaryFromReader);
      msg.setGrantspec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.GrantAndGrantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.GrantAndGrantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.GrantAndGrantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.GrantAndGrantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      grant_pb.Grant.serializeBinaryToWriter
    );
  }
  f = message.getGrantspec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      grant_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional grant.Grant Grant = 1;
 * @return {?proto.grant.Grant}
 */
proto.hoard.GrantAndGrantSpec.prototype.getGrant = function() {
  return /** @type{?proto.grant.Grant} */ (
    jspb.Message.getWrapperField(this, grant_pb.Grant, 1));
};


/** @param {?proto.grant.Grant|undefined} value */
proto.hoard.GrantAndGrantSpec.prototype.setGrant = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hoard.GrantAndGrantSpec.prototype.clearGrant = function() {
  this.setGrant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.GrantAndGrantSpec.prototype.hasGrant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional grant.Spec GrantSpec = 2;
 * @return {?proto.grant.Spec}
 */
proto.hoard.GrantAndGrantSpec.prototype.getGrantspec = function() {
  return /** @type{?proto.grant.Spec} */ (
    jspb.Message.getWrapperField(this, grant_pb.Spec, 2));
};


/** @param {?proto.grant.Spec|undefined} value */
proto.hoard.GrantAndGrantSpec.prototype.setGrantspec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hoard.GrantAndGrantSpec.prototype.clearGrantspec = function() {
  this.setGrantspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.GrantAndGrantSpec.prototype.hasGrantspec = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.PlaintextAndGrantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.PlaintextAndGrantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.PlaintextAndGrantSpec.displayName = 'proto.hoard.PlaintextAndGrantSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.PlaintextAndGrantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.PlaintextAndGrantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.PlaintextAndGrantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.PlaintextAndGrantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    plaintext: (f = msg.getPlaintext()) && proto.hoard.Plaintext.toObject(includeInstance, f),
    grantspec: (f = msg.getGrantspec()) && grant_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.PlaintextAndGrantSpec}
 */
proto.hoard.PlaintextAndGrantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.PlaintextAndGrantSpec;
  return proto.hoard.PlaintextAndGrantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.PlaintextAndGrantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.PlaintextAndGrantSpec}
 */
proto.hoard.PlaintextAndGrantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hoard.Plaintext;
      reader.readMessage(value,proto.hoard.Plaintext.deserializeBinaryFromReader);
      msg.setPlaintext(value);
      break;
    case 2:
      var value = new grant_pb.Spec;
      reader.readMessage(value,grant_pb.Spec.deserializeBinaryFromReader);
      msg.setGrantspec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.PlaintextAndGrantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.PlaintextAndGrantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.PlaintextAndGrantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.PlaintextAndGrantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaintext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hoard.Plaintext.serializeBinaryToWriter
    );
  }
  f = message.getGrantspec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      grant_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional Plaintext Plaintext = 1;
 * @return {?proto.hoard.Plaintext}
 */
proto.hoard.PlaintextAndGrantSpec.prototype.getPlaintext = function() {
  return /** @type{?proto.hoard.Plaintext} */ (
    jspb.Message.getWrapperField(this, proto.hoard.Plaintext, 1));
};


/** @param {?proto.hoard.Plaintext|undefined} value */
proto.hoard.PlaintextAndGrantSpec.prototype.setPlaintext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hoard.PlaintextAndGrantSpec.prototype.clearPlaintext = function() {
  this.setPlaintext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.PlaintextAndGrantSpec.prototype.hasPlaintext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional grant.Spec GrantSpec = 2;
 * @return {?proto.grant.Spec}
 */
proto.hoard.PlaintextAndGrantSpec.prototype.getGrantspec = function() {
  return /** @type{?proto.grant.Spec} */ (
    jspb.Message.getWrapperField(this, grant_pb.Spec, 2));
};


/** @param {?proto.grant.Spec|undefined} value */
proto.hoard.PlaintextAndGrantSpec.prototype.setGrantspec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hoard.PlaintextAndGrantSpec.prototype.clearGrantspec = function() {
  this.setGrantspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.PlaintextAndGrantSpec.prototype.hasGrantspec = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.ReferenceAndGrantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.ReferenceAndGrantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.ReferenceAndGrantSpec.displayName = 'proto.hoard.ReferenceAndGrantSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.ReferenceAndGrantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.ReferenceAndGrantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.ReferenceAndGrantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.ReferenceAndGrantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && reference_pb.Ref.toObject(includeInstance, f),
    grantspec: (f = msg.getGrantspec()) && grant_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.ReferenceAndGrantSpec}
 */
proto.hoard.ReferenceAndGrantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.ReferenceAndGrantSpec;
  return proto.hoard.ReferenceAndGrantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.ReferenceAndGrantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.ReferenceAndGrantSpec}
 */
proto.hoard.ReferenceAndGrantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new reference_pb.Ref;
      reader.readMessage(value,reference_pb.Ref.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new grant_pb.Spec;
      reader.readMessage(value,grant_pb.Spec.deserializeBinaryFromReader);
      msg.setGrantspec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.ReferenceAndGrantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.ReferenceAndGrantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.ReferenceAndGrantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.ReferenceAndGrantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      reference_pb.Ref.serializeBinaryToWriter
    );
  }
  f = message.getGrantspec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      grant_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional reference.Ref Reference = 1;
 * @return {?proto.reference.Ref}
 */
proto.hoard.ReferenceAndGrantSpec.prototype.getReference = function() {
  return /** @type{?proto.reference.Ref} */ (
    jspb.Message.getWrapperField(this, reference_pb.Ref, 1));
};


/** @param {?proto.reference.Ref|undefined} value */
proto.hoard.ReferenceAndGrantSpec.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hoard.ReferenceAndGrantSpec.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.ReferenceAndGrantSpec.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional grant.Spec GrantSpec = 2;
 * @return {?proto.grant.Spec}
 */
proto.hoard.ReferenceAndGrantSpec.prototype.getGrantspec = function() {
  return /** @type{?proto.grant.Spec} */ (
    jspb.Message.getWrapperField(this, grant_pb.Spec, 2));
};


/** @param {?proto.grant.Spec|undefined} value */
proto.hoard.ReferenceAndGrantSpec.prototype.setGrantspec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hoard.ReferenceAndGrantSpec.prototype.clearGrantspec = function() {
  this.setGrantspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.ReferenceAndGrantSpec.prototype.hasGrantspec = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.Plaintext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.Plaintext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.Plaintext.displayName = 'proto.hoard.Plaintext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.Plaintext.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.Plaintext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.Plaintext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.Plaintext.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    salt: msg.getSalt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.Plaintext}
 */
proto.hoard.Plaintext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.Plaintext;
  return proto.hoard.Plaintext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.Plaintext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.Plaintext}
 */
proto.hoard.Plaintext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.Plaintext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.Plaintext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.Plaintext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.Plaintext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes Data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.hoard.Plaintext.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.hoard.Plaintext.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.hoard.Plaintext.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.hoard.Plaintext.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes Salt = 2;
 * @return {!(string|Uint8Array)}
 */
proto.hoard.Plaintext.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Salt = 2;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.hoard.Plaintext.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes Salt = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.hoard.Plaintext.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.hoard.Plaintext.prototype.setSalt = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.Ciphertext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.Ciphertext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.Ciphertext.displayName = 'proto.hoard.Ciphertext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.Ciphertext.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.Ciphertext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.Ciphertext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.Ciphertext.toObject = function(includeInstance, msg) {
  var f, obj = {
    encrypteddata: msg.getEncrypteddata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.Ciphertext}
 */
proto.hoard.Ciphertext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.Ciphertext;
  return proto.hoard.Ciphertext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.Ciphertext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.Ciphertext}
 */
proto.hoard.Ciphertext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncrypteddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.Ciphertext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.Ciphertext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.Ciphertext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.Ciphertext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncrypteddata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes EncryptedData = 1;
 * @return {!(string|Uint8Array)}
 */
proto.hoard.Ciphertext.prototype.getEncrypteddata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes EncryptedData = 1;
 * This is a type-conversion wrapper around `getEncrypteddata()`
 * @return {string}
 */
proto.hoard.Ciphertext.prototype.getEncrypteddata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncrypteddata()));
};


/**
 * optional bytes EncryptedData = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncrypteddata()`
 * @return {!Uint8Array}
 */
proto.hoard.Ciphertext.prototype.getEncrypteddata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncrypteddata()));
};


/** @param {!(string|Uint8Array)} value */
proto.hoard.Ciphertext.prototype.setEncrypteddata = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.ReferenceAndCiphertext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.ReferenceAndCiphertext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.ReferenceAndCiphertext.displayName = 'proto.hoard.ReferenceAndCiphertext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.ReferenceAndCiphertext.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.ReferenceAndCiphertext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.ReferenceAndCiphertext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.ReferenceAndCiphertext.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && reference_pb.Ref.toObject(includeInstance, f),
    ciphertext: (f = msg.getCiphertext()) && proto.hoard.Ciphertext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.ReferenceAndCiphertext}
 */
proto.hoard.ReferenceAndCiphertext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.ReferenceAndCiphertext;
  return proto.hoard.ReferenceAndCiphertext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.ReferenceAndCiphertext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.ReferenceAndCiphertext}
 */
proto.hoard.ReferenceAndCiphertext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new reference_pb.Ref;
      reader.readMessage(value,reference_pb.Ref.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new proto.hoard.Ciphertext;
      reader.readMessage(value,proto.hoard.Ciphertext.deserializeBinaryFromReader);
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.ReferenceAndCiphertext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.ReferenceAndCiphertext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.ReferenceAndCiphertext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.ReferenceAndCiphertext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      reference_pb.Ref.serializeBinaryToWriter
    );
  }
  f = message.getCiphertext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hoard.Ciphertext.serializeBinaryToWriter
    );
  }
};


/**
 * optional reference.Ref Reference = 1;
 * @return {?proto.reference.Ref}
 */
proto.hoard.ReferenceAndCiphertext.prototype.getReference = function() {
  return /** @type{?proto.reference.Ref} */ (
    jspb.Message.getWrapperField(this, reference_pb.Ref, 1));
};


/** @param {?proto.reference.Ref|undefined} value */
proto.hoard.ReferenceAndCiphertext.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hoard.ReferenceAndCiphertext.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.ReferenceAndCiphertext.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ciphertext Ciphertext = 2;
 * @return {?proto.hoard.Ciphertext}
 */
proto.hoard.ReferenceAndCiphertext.prototype.getCiphertext = function() {
  return /** @type{?proto.hoard.Ciphertext} */ (
    jspb.Message.getWrapperField(this, proto.hoard.Ciphertext, 2));
};


/** @param {?proto.hoard.Ciphertext|undefined} value */
proto.hoard.ReferenceAndCiphertext.prototype.setCiphertext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hoard.ReferenceAndCiphertext.prototype.clearCiphertext = function() {
  this.setCiphertext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hoard.ReferenceAndCiphertext.prototype.hasCiphertext = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hoard.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hoard.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hoard.Address.displayName = 'proto.hoard.Address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hoard.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.hoard.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hoard.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hoard.Address}
 */
proto.hoard.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hoard.Address;
  return proto.hoard.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hoard.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hoard.Address}
 */
proto.hoard.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hoard.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hoard.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hoard.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hoard.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.hoard.Address.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.hoard.Address.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.hoard.Address.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.hoard.Address.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.hoard);
