// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hoard.proto

/*
Package hoard is a generated protocol buffer package.

It is generated from these files:
	hoard.proto

It has these top-level messages:
	Reference
	Plaintext
	Address
	StatInfo
*/
package hoard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Reference struct {
	Address   []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SecretKey []byte `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	Salt      []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (m *Reference) String() string            { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Reference) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Reference) GetSecretKey() []byte {
	if m != nil {
		return m.SecretKey
	}
	return nil
}

func (m *Reference) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

type Plaintext struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *Plaintext) Reset()                    { *m = Plaintext{} }
func (m *Plaintext) String() string            { return proto.CompactTextString(m) }
func (*Plaintext) ProtoMessage()               {}
func (*Plaintext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Plaintext) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Plaintext) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

type Address struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Address) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type StatInfo struct {
	Exists   bool   `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Size     uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Location string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (m *StatInfo) Reset()                    { *m = StatInfo{} }
func (m *StatInfo) String() string            { return proto.CompactTextString(m) }
func (*StatInfo) ProtoMessage()               {}
func (*StatInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatInfo) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *StatInfo) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *StatInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func init() {
	proto.RegisterType((*Reference)(nil), "hoard.Reference")
	proto.RegisterType((*Plaintext)(nil), "hoard.Plaintext")
	proto.RegisterType((*Address)(nil), "hoard.Address")
	proto.RegisterType((*StatInfo)(nil), "hoard.StatInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hoard service

type HoardClient interface {
	Get(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Plaintext, error)
	Put(ctx context.Context, in *Plaintext, opts ...grpc.CallOption) (*Reference, error)
	Ref(ctx context.Context, in *Plaintext, opts ...grpc.CallOption) (*Reference, error)
	Stat(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StatInfo, error)
}

type hoardClient struct {
	cc *grpc.ClientConn
}

func NewHoardClient(cc *grpc.ClientConn) HoardClient {
	return &hoardClient{cc}
}

func (c *hoardClient) Get(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Plaintext, error) {
	out := new(Plaintext)
	err := grpc.Invoke(ctx, "/hoard.Hoard/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoardClient) Put(ctx context.Context, in *Plaintext, opts ...grpc.CallOption) (*Reference, error) {
	out := new(Reference)
	err := grpc.Invoke(ctx, "/hoard.Hoard/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoardClient) Ref(ctx context.Context, in *Plaintext, opts ...grpc.CallOption) (*Reference, error) {
	out := new(Reference)
	err := grpc.Invoke(ctx, "/hoard.Hoard/Ref", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoardClient) Stat(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StatInfo, error) {
	out := new(StatInfo)
	err := grpc.Invoke(ctx, "/hoard.Hoard/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hoard service

type HoardServer interface {
	Get(context.Context, *Reference) (*Plaintext, error)
	Put(context.Context, *Plaintext) (*Reference, error)
	Ref(context.Context, *Plaintext) (*Reference, error)
	Stat(context.Context, *Address) (*StatInfo, error)
}

func RegisterHoardServer(s *grpc.Server, srv HoardServer) {
	s.RegisterService(&_Hoard_serviceDesc, srv)
}

func _Hoard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoard.Hoard/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).Get(ctx, req.(*Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hoard_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plaintext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoard.Hoard/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).Put(ctx, req.(*Plaintext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hoard_Ref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plaintext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).Ref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoard.Hoard/Ref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).Ref(ctx, req.(*Plaintext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hoard_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoard.Hoard/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).Stat(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hoard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hoard.Hoard",
	HandlerType: (*HoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Hoard_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Hoard_Put_Handler,
		},
		{
			MethodName: "Ref",
			Handler:    _Hoard_Ref_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _Hoard_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hoard.proto",
}

func init() { proto.RegisterFile("hoard.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0x4d, 0xda, 0x26, 0xa3, 0xa8, 0xcc, 0x41, 0x42, 0xf0, 0x20, 0xf1, 0xa0, 0xbd, 0xf4,
	0x60, 0xbf, 0xc0, 0x93, 0x8a, 0x97, 0xb2, 0x1e, 0x3c, 0xaf, 0xc9, 0x04, 0x03, 0x21, 0x2b, 0xbb,
	0x23, 0x54, 0xff, 0xca, 0x3f, 0x94, 0x4c, 0x37, 0x1b, 0x41, 0x84, 0xde, 0xe6, 0xcd, 0x7b, 0x33,
	0x3b, 0xef, 0x2d, 0x1c, 0xbd, 0x19, 0x6d, 0xeb, 0xf5, 0xbb, 0x35, 0x6c, 0x70, 0x2e, 0xa0, 0x7c,
	0x81, 0x4c, 0x51, 0x43, 0x96, 0xfa, 0x8a, 0x30, 0x87, 0xa5, 0xae, 0x6b, 0x4b, 0xce, 0xe5, 0xd1,
	0x65, 0x74, 0x73, 0xac, 0x46, 0x88, 0x17, 0x90, 0x39, 0xaa, 0x2c, 0xf1, 0x13, 0x7d, 0xe6, 0x33,
	0xe1, 0xa6, 0x06, 0x22, 0x24, 0x4e, 0x77, 0x9c, 0xc7, 0x42, 0x48, 0x5d, 0x6e, 0x20, 0xdb, 0x76,
	0xba, 0xed, 0x99, 0x76, 0x3c, 0x08, 0x6a, 0xcd, 0xda, 0x6f, 0x95, 0x3a, 0x0c, 0xcd, 0x7e, 0x0d,
	0x5d, 0xc1, 0xf2, 0xce, 0xbf, 0xf8, 0xef, 0x2d, 0xa5, 0x82, 0xf4, 0x99, 0x35, 0x3f, 0xf6, 0x8d,
	0xc1, 0x73, 0x58, 0xd0, 0xae, 0x75, 0xbc, 0x17, 0xa5, 0xca, 0x23, 0x59, 0xde, 0x7e, 0x91, 0x2c,
	0x4f, 0x94, 0xd4, 0x58, 0x40, 0xda, 0x99, 0x4a, 0x73, 0x6b, 0x7a, 0xb9, 0x34, 0x53, 0x01, 0xdf,
	0x7e, 0x47, 0x30, 0x7f, 0x18, 0x02, 0xc1, 0x15, 0xc4, 0xf7, 0xc4, 0x78, 0xb6, 0xde, 0x87, 0x15,
	0xc2, 0x29, 0xc6, 0xce, 0xe4, 0x6a, 0x05, 0xf1, 0xf6, 0x63, 0x92, 0x06, 0xa2, 0xf8, 0x33, 0x3c,
	0x48, 0x15, 0x35, 0x07, 0x49, 0xaf, 0x21, 0x19, 0xec, 0xe1, 0x89, 0x67, 0x7c, 0x20, 0xc5, 0xa9,
	0xc7, 0xa3, 0xf7, 0xd7, 0x85, 0x7c, 0xe4, 0xe6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x0b, 0x50,
	0x94, 0xd7, 0x01, 0x00, 0x00,
}
